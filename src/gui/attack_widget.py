#!/usr/bin/env python3
"""
Widget d'attaques Bluetooth pour l'interface PyQt5
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
                             QLabel, QLineEdit, QProgressBar, QGroupBox, 
                             QComboBox, QSpinBox, QCheckBox, QTextEdit,
                             QGridLayout, QFrame, QSplitter)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal
from PyQt5.QtGui import QFont, QColor

class AttackWidget(QWidget):
    attack_started = pyqtSignal(str, str)  # type, target
    attack_stopped = pyqtSignal()
    
    def __init__(self, bluetooth_manager):
        super().__init__()
        self.bluetooth_manager = bluetooth_manager
        self.attack_descriptions = {
            "BlueBorne": "Exploitation de vuln√©rabilit√©s critiques permettant l'ex√©cution de code √† distance via Bluetooth.",
            "KNOB": "Attaque sur la n√©gociation de cl√©s pour forcer l'utilisation de cl√©s faibles.",
            "BlueSmack": "Attaque par d√©ni de service en envoyant des paquets L2CAP de grande taille.",
            "BlueSnarf": "Extraction de donn√©es (contacts, calendrier, messages) via le protocole OBEX.",
            "BlueJacking": "Envoi de messages non sollicit√©s via le protocole OBEX.",
            "L2CAP Injection": "Injection de paquets malveillants dans les canaux L2CAP.",
            "SDP Overflow": "D√©bordement de buffer sur le Service Discovery Protocol.",
            "PIN Cracking": "Crackage de codes PIN par force brute ou dictionnaire.",
            "BlueBug": "Exploitation de bugs pour ex√©cuter des commandes AT sur les appareils."
        }
        self.init_ui()
        self.setup_connections()
        
    def init_ui(self):
        """Initialisation de l'interface"""
        layout = QVBoxLayout(self)
        
        # Splitter principal
        splitter = QSplitter(Qt.Horizontal)
        
        # Panneau de gauche - Configuration des attaques
        left_panel = self.create_attack_config_panel()
        splitter.addWidget(left_panel)
        
        # Panneau de droite - Logs et statut
        right_panel = self.create_logs_panel()
        splitter.addWidget(right_panel)
        
        # R√©partition des panneaux
        splitter.setSizes([400, 600])
        layout.addWidget(splitter)
        
    def create_attack_config_panel(self):
        """Cr√©er le panneau de configuration des attaques"""
        panel = QWidget()
        layout = QVBoxLayout(panel)
        
        # S√©lection de la cible
        target_group = QGroupBox("üéØ Cible")
        target_layout = QGridLayout(target_group)
        
        target_layout.addWidget(QLabel("Adresse MAC:"), 0, 0)
        self.target_input = QLineEdit()
        self.target_input.setPlaceholderText("00:11:22:33:44:55")
        target_layout.addWidget(self.target_input, 0, 1)
        
        self.target_from_scanner_btn = QPushButton("üì± Depuis Scanner")
        target_layout.addWidget(self.target_from_scanner_btn, 1, 0, 1, 2)
        
        layout.addWidget(target_group)
        
        # S√©lection de l'attaque
        attack_group = QGroupBox("‚öîÔ∏è Type d'Attaque")
        attack_layout = QVBoxLayout(attack_group)
        
        self.attack_combo = QComboBox()
        self.attack_combo.addItems([
            "BlueBorne",
            "KNOB", 
            "BlueSmack",
            "BlueSnarf",
            "BlueJacking",
            "L2CAP Injection",
            "SDP Overflow",
            "PIN Cracking",
            "BlueBug"
        ])
        attack_layout.addWidget(self.attack_combo)
        
        # Description de l'attaque
        self.attack_desc = QLabel()
        self.attack_desc.setWordWrap(True)
        self.attack_desc.setStyleSheet("color: #cccccc; font-style: italic; padding: 10px;")
        attack_layout.addWidget(self.attack_desc)
        
        layout.addWidget(attack_group)
        
        # Param√®tres avanc√©s
        params_group = QGroupBox("‚öôÔ∏è Param√®tres Avanc√©s")
        params_layout = QGridLayout(params_group)
        
        params_layout.addWidget(QLabel("Timeout (sec):"), 0, 0)
        self.timeout_spin = QSpinBox()
        self.timeout_spin.setRange(5, 300)
        self.timeout_spin.setValue(60)
        params_layout.addWidget(self.timeout_spin, 0, 1)
        
        params_layout.addWidget(QLabel("Tentatives:"), 1, 0)
        self.attempts_spin = QSpinBox()
        self.attempts_spin.setRange(1, 100)
        self.attempts_spin.setValue(10)
        params_layout.addWidget(self.attempts_spin, 1, 1)
        
        params_layout.addWidget(QLabel("D√©lai (sec):"), 2, 0)
        self.delay_spin = QSpinBox()
        self.delay_spin.setRange(0, 60)
        self.delay_spin.setValue(1)
        self.delay_spin.setSuffix(" sec")
        params_layout.addWidget(self.delay_spin, 2, 1)
        
        # Options
        self.stealth_check = QCheckBox("Mode furtif")
        params_layout.addWidget(self.stealth_check, 3, 0)
        
        self.verbose_check = QCheckBox("Mode verbeux")
        self.verbose_check.setChecked(True)
        params_layout.addWidget(self.verbose_check, 3, 1)
        
        layout.addWidget(params_group)
        
        # Contr√¥les d'attaque
        controls_group = QGroupBox("üéÆ Contr√¥les")
        controls_layout = QHBoxLayout(controls_group)
        
        self.start_button = QPushButton("üöÄ Lancer Attaque")
        self.start_button.setMinimumHeight(40)
        self.start_button.setStyleSheet("background-color: #28a745;")
        
        self.stop_button = QPushButton("‚èπÔ∏è Arr√™ter")
        self.stop_button.setMinimumHeight(40)
        self.stop_button.setEnabled(False)
        self.stop_button.setStyleSheet("background-color: #dc3545;")
        
        controls_layout.addWidget(self.start_button)
        controls_layout.addWidget(self.stop_button)
        
        layout.addWidget(controls_group)
        
        # Barre de progression
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        layout.addStretch()
        return panel
        
    def create_logs_panel(self):
        """Cr√©er le panneau de logs"""
        panel = QWidget()
        layout = QVBoxLayout(panel)
        
        # En-t√™te des logs
        logs_header = QHBoxLayout()
        logs_header.addWidget(QLabel("üìã Logs d'Attaque"))
        
        self.clear_logs_btn = QPushButton("üóëÔ∏è Effacer")
        logs_header.addWidget(self.clear_logs_btn)
        
        self.save_logs_btn = QPushButton("üíæ Sauvegarder")
        logs_header.addWidget(self.save_logs_btn)
        
        logs_header.addStretch()
        layout.addLayout(logs_header)
        
        # Zone de logs
        self.logs_text = QTextEdit()
        self.logs_text.setReadOnly(True)
        self.logs_text.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #ffffff;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 11px;
                border: 1px solid #555555;
            }
        """)
        layout.addWidget(self.logs_text)
        
        # Statut
        self.status_label = QLabel("Pr√™t pour l'attaque")
        self.status_label.setStyleSheet("color: #00ff00; font-weight: bold; padding: 5px;")
        layout.addWidget(self.status_label)
        
        return panel
        
    def setup_connections(self):
        """Configuration des connexions signal/slot"""
        self.attack_combo.currentTextChanged.connect(self.update_attack_description)
        self.start_button.clicked.connect(self.start_attack)
        self.stop_button.clicked.connect(self.stop_attack)
        self.clear_logs_btn.clicked.connect(self.clear_logs)
        self.save_logs_btn.clicked.connect(self.save_logs)
        self.target_from_scanner_btn.clicked.connect(self.get_target_from_scanner)
        
        # Initialiser la description
        self.update_attack_description()
        
    def update_attack_description(self):
        """Mettre √† jour la description de l'attaque s√©lectionn√©e"""
        attack_type = self.attack_combo.currentText()
        description = self.attack_descriptions.get(attack_type, "Description non disponible.")
        self.attack_desc.setText(description)
        
    def select_attack(self, attack_name):
        """S√©lectionner une attaque sp√©cifique"""
        index = self.attack_combo.findText(attack_name)
        if index >= 0:
            self.attack_combo.setCurrentIndex(index)
            
    def start_attack(self):
        """D√©marrer l'attaque"""
        target = self.target_input.text().strip()
        if not target:
            self.log_message("‚ùå Erreur: Adresse cible requise", "error")
            return
            
        attack_type = self.attack_combo.currentText()
        
        # Configurer les param√®tres
        config = {
            'timeout': self.timeout_spin.value(),
            'attempts': self.attempts_spin.value(),
            'delay': self.delay_spin.value(),
            'stealth': self.stealth_check.isChecked(),
            'verbose': self.verbose_check.isChecked()
        }
        
        self.log_message(f"üöÄ D√©marrage de l'attaque {attack_type} sur {target}", "info")
        self.log_message(f"‚öôÔ∏è Configuration: {config}", "info")
        
        # D√©marrer l'attaque via le gestionnaire Bluetooth
        success = self.bluetooth_manager.execute_attack(attack_type, target, config, self.log_message)
        
        if success:
            self.start_button.setEnabled(False)
            self.stop_button.setEnabled(True)
            self.progress_bar.setVisible(True)
            self.progress_bar.setRange(0, 0)  # Ind√©termin√©
            self.status_label.setText("Attaque en cours...")
            self.status_label.setStyleSheet("color: #ffff00; font-weight: bold; padding: 5px;")
        else:
            self.log_message("‚ùå √âchec du d√©marrage de l'attaque", "error")
            
    def stop_attack(self):
        """Arr√™ter l'attaque"""
        self.bluetooth_manager.stop_attack()
        
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.progress_bar.setVisible(False)
        self.status_label.setText("Attaque arr√™t√©e")
        self.status_label.setStyleSheet("color: #ff0000; font-weight: bold; padding: 5px;")
        
        self.log_message("‚èπÔ∏è Attaque arr√™t√©e par l'utilisateur", "warning")
        
    def get_target_from_scanner(self):
        """Obtenir la cible depuis le scanner"""
        # Cette m√©thode sera connect√©e au scanner
        self.log_message("üì± Fonctionnalit√© √† impl√©menter: s√©lection depuis le scanner", "info")
        
    def log_message(self, message, level="info"):
        """Ajouter un message aux logs"""
        timestamp = QTimer().remainingTime()  # Utiliser le temps actuel
        timestamp_str = f"[{timestamp:08d}]"
        
        # Couleurs selon le niveau
        color_map = {
            "info": "#ffffff",
            "warning": "#ffff00", 
            "error": "#ff0000",
            "success": "#00ff00"
        }
        
        color = color_map.get(level, "#ffffff")
        formatted_message = f'<span style="color: {color};">{timestamp_str} [{level.upper()}] {message}</span>'
        
        self.logs_text.append(formatted_message)
        
        # Auto-scroll
        cursor = self.logs_text.textCursor()
        cursor.movePosition(cursor.End)
        self.logs_text.setTextCursor(cursor)
        
    def clear_logs(self):
        """Effacer les logs"""
        self.logs_text.clear()
        self.log_message("üóëÔ∏è Logs effac√©s", "info")
        
    def save_logs(self):
        """Sauvegarder les logs"""
        # Cette fonctionnalit√© sera impl√©ment√©e plus tard
        self.log_message("üíæ Fonctionnalit√© de sauvegarde √† impl√©menter", "info")
